Using these variable definitions: 

int i = 0, &r = i;
auto a = r; // `a` is an `int` (`r` is an alias for `i`, which has type `int`)
const int ci = i, &cr = ci;
auto b = ci; // `b` is an `int` (top-level `const` in `ci` is dropped)
auto c = cr; // `c` is an `int` (`cr` is an alias for `ci` whose `const` is top-level)
auto d = &i; // `d` is an `int*` (& if an `int` object is `int*`)
auto e = &ci; // `e` is `const int*` (& of a `const` object is low-level `const`)
const auto f = ci; // deduced type of `ci` is `int`; `f` has type `const int`
auto &g = ci; // `g` is a `const int&` that is bound to `ci`
// auto &h = 42; error: we can't bind a plain reference to a literal
const auto &j = 42; // ok: we can bind a `const` reference to a literal though doing this for an `int` is overkill
auto k = ci, &l = i; // `k` is `int`; `l` is `int&`
auto &m = ci, *p = &ci; // `m` is a `const int&`; `p` is a pointer to `const int`
// auto &n = i, *p2 = *ci; error: type deduced from `i` is `int`; type deduced from `&ci` is `const int`

determine what happens in each of these assignments:
a = 42; // `a` is an `int` and is now assigned the value 42
b = 42; // `b` is an `int` and is now assigned the value 42
c = 42; // `c` is an `int` and is now assigned the value 42
d = 42; // error: `d` is an `int*` an cannot be assigned a value of type `int`
e = 42; // error: `e` is a `const int` and cannot be assigned a new value
g = 42; // error: `g` is a `const int&` and the value it refers to cannot be modified through this reference.